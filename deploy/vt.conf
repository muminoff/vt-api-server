proxy_cache_path  /var/cache/nginx/cache levels=1:2 keys_zone=cache:8m max_size=3000m inactive=600m;
proxy_temp_path /var/tmp;

upstream rest_nodes {
  server 127.0.0.1:3000 weight=1 fail_timeout=60s;
}
server {

  listen 443 ssl;
  server_name api.drivers.uz;
  ssl_certificate /etc/letsencrypt/live/api.drivers.uz/fullchain.pem;
  ssl_certificate_key /etc/letsencrypt/live/api.drivers.uz/privkey.pem;

  ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
  ssl_prefer_server_ciphers on;
  ssl_ciphers 'EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH';

  error_page 500 502 503 504 =200 @50*_json;


  gzip on;
  gzip_comp_level 6;
  gzip_vary on;
  gzip_min_length  1000;
  gzip_proxied any;
  gzip_types application/json;
  gzip_buffers 16 8k;

  location / {
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection "upgrade";
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header Host $host;
    proxy_http_version 1.1;
    proxy_pass http://rest_nodes;

    proxy_cache cache;
    proxy_cache_valid 200 1d;
    proxy_cache_use_stale  error timeout invalid_header updating http_500 http_502 http_503 http_504;
    proxy_cache_bypass $http_upgrade;
  }

  location @50*_json {
    default_type application/json;
    return 200 '{"status":"dead", "message": "Node.js cluster is down. Tell admin to start over cluster."}';
  }
}

server {
  listen 80;
  server_name api.drivers.uz;
  return 301 https://$host$request_uri;
}
